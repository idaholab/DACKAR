src.dackar.similarity.SentenceSimilarity
========================================

.. py:module:: src.dackar.similarity.SentenceSimilarity


Attributes
----------

.. autoapisummary::

   src.dackar.similarity.SentenceSimilarity.log_format
   src.dackar.similarity.SentenceSimilarity.logger


Classes
-------

.. autoapisummary::

   src.dackar.similarity.SentenceSimilarity.SentenceSimilarity


Module Contents
---------------

.. py:data:: log_format
   :value: '%(asctime)s %(message)s'


.. py:data:: logger

.. py:class:: SentenceSimilarity(disambiguationMethod='simple_lesk', similarityMethod='semantic_similarity_synsets', wordOrderContribution=0.0)

   .. py:attribute:: validDisambiguation
      :value: ['simple_lesk', 'original_lesk', 'cosine_lesk', 'adapted_lesk', 'max_similarity']



   .. py:attribute:: wordnetSimMethod
      :value: ['path_similarity', 'wup_similarity', 'lch_similarity', 'res_similarity', 'jcn_similarity',...



   .. py:attribute:: validSimilarity


   .. py:attribute:: wordOrder


   .. py:attribute:: disambiguationMethod


   .. py:attribute:: similarityMethod


   .. py:attribute:: brownIc


   .. py:method:: setParameters(paramDict)

      Method to set the parameters



   .. py:method:: constructSimilarityVectorPawarMagoMethod(arr1, arr2)

      Construct the similarity vector

      :param arr1: set of wordnet.Synset for one sentence
      :param arr2: set of wordnet.Synset for the other sentence

      :returns: list, list of similarity vector
                count: int, the number of words that have high similarity >=0.804
      :rtype: vector



   .. py:method:: sentenceSimilarity(sentence1, sentence2, method='pm_disambiguation', infoContentNorm=False)

      sentence similarity calculation



   .. py:method:: sentenceSimilarityPawarMagoMethod(sentence1, sentence2)

      Proposed method from https://arxiv.org/pdf/1802.05667.pdf

      :param sentence1: str, first sentence used to compute sentence similarity
      :param sentence2: str, second sentence used to compute sentence similarity

      :returns: float, [0, 1], the computed similarity for given two sentences
      :rtype: similarity



   .. py:method:: sentenceSimialrityBestSense(sentence1, sentence2, infoContentNorm=False)

      Proposed method from https://github.com/anishvarsha/Sentence-Similaritity-using-corpus-statistics
      Compute sentence similarity using both semantic and word order similarity
      The semantic similarity is based on maximum word similarity between one word and another sentence

      :param sentence1: str, first sentence used to compute sentence similarity
      :param sentence2: str, second sentence used to compute sentence similarity
      :param infoContentNorm: bool, True if statistics corpus is used to weight similarity vectors

      :returns: float, [0, 1], the computed similarity for given two sentences
      :rtype: similarity



