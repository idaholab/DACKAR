src.dackar.anomalies.AnomalyBase
================================

.. py:module:: src.dackar.anomalies.AnomalyBase

.. autoapi-nested-parse::

   Created on Dec. 19, 2024

   @author: wangc, mandd
   Base Class for Anomaly Detection



Attributes
----------

.. autoapisummary::

   src.dackar.anomalies.AnomalyBase.logger


Classes
-------

.. autoapisummary::

   src.dackar.anomalies.AnomalyBase.AnomalyBase


Module Contents
---------------

.. py:data:: logger

.. py:class:: AnomalyBase(norm='robust')

   Bases: :py:obj:`sklearn.base.BaseEstimator`


   Anomaly detection base class



   .. py:attribute:: print_tag
      :value: 'AnomalyBase'



   .. py:attribute:: is_fitted
      :value: False



   .. py:attribute:: _features
      :value: None



   .. py:attribute:: _targets
      :value: None



   .. py:attribute:: _norm
      :value: 'robust'



   .. py:attribute:: _meta


   .. py:attribute:: _xindex
      :value: None



   .. py:attribute:: _yindex
      :value: None



   .. py:attribute:: _xcolumns
      :value: None



   .. py:attribute:: _ycolumns
      :value: None



   .. py:method:: reset()

      reset




   .. py:method:: get_params()

      Get parameters for this estimator.

      :returns: **params** -- Parameter names mapped to their values.
      :rtype: dict



   .. py:method:: set_params(**params)

      Set the parameters of this estimator.

      :param \*\*params: Estimator parameters.
      :type \*\*params: dict

      :returns: **self** -- Estimator instance.
      :rtype: estimator instance



   .. py:method:: fit(X, y=None)

      perform fitting

      :param X: (n_samples, n_features)
      :type X: array-like
      :param y: (n_samples, n_features). Defaults to None.
      :type y: array-like, optional



   .. py:method:: evaluate(X)

      perform evaluation

      :param X: (n_samples, n_features)
      :type X: array-like



   .. py:method:: plot()

      plot data




   .. py:method:: get_anomalies()
      :abstractmethod:


      get the anomalies




   .. py:method:: _fit(X, y=None)
      :abstractmethod:


      perform fitting

      :param X: (n_samples, n_features)
      :type X: array-like
      :param y: (n_samples, n_features). Defaults to None.
      :type y: array-like, optional



   .. py:method:: _evaluate(X)
      :abstractmethod:


      perform evaluation

      :param X: (n_samples, n_features)
      :type X: array-like



   .. py:method:: check_data(data)
      :staticmethod:


      Check the format of data

      :param data: list, numpy.ndarray or pandas.DataFrame
      :type data: _type_



