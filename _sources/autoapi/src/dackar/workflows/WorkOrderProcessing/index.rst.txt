src.dackar.workflows.WorkOrderProcessing
========================================

.. py:module:: src.dackar.workflows.WorkOrderProcessing

.. autoapi-nested-parse::

   Created on March, 2024

   @author: wangc, mandd



Attributes
----------

.. autoapisummary::

   src.dackar.workflows.WorkOrderProcessing.logger


Classes
-------

.. autoapisummary::

   src.dackar.workflows.WorkOrderProcessing.WorkOrderProcessing


Module Contents
---------------

.. py:data:: logger

.. py:class:: WorkOrderProcessing(nlp, entID='SSC', *args, **kwargs)

   Bases: :py:obj:`src.dackar.workflows.WorkflowBase.WorkflowBase`


   Class to process CWS work order dataset


   .. py:attribute:: _allRelPairs
      :value: []



   .. py:attribute:: _relationNames
      :value: ['Subj_Entity', 'Relation', 'Obj_Entity']



   .. py:method:: reset()

      Reset rule-based matcher



   .. py:method:: addKeywords(keywords, ktype)

      Method to update self._causalKeywords or self._statusKeywords

      :param keywords: dict, keywords that will be add to self._causalKeywords or self._statusKeywords
      :param ktype: string, either 'status' or 'causal'



   .. py:method:: extractInformation()

      extract information

      :param None:

      :returns: None



   .. py:method:: extractHealthStatus(matchedSents, predSynonyms=[], exclPrepos=[])

      Extract health status and relation

      :param matchedSents: list, the matched sentences
      :param predSynonyms: list, predicate synonyms
      :param exclPrepos: list, exclude the prepositions



   .. py:method:: extractRelDep(matchedSents)

      :param matchedSents: list, the list of matched sentences

      :returns: generator, the extracted causal relation
      :rtype: (subject tuple, predicate, object tuple)



