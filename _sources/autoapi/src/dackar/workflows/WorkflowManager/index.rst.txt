src.dackar.workflows.WorkflowManager
====================================

.. py:module:: src.dackar.workflows.WorkflowManager

.. autoapi-nested-parse::

   Created on August 1, 2025
   @author: wangc, mandd



Attributes
----------

.. autoapisummary::

   src.dackar.workflows.WorkflowManager.NERMapping
   src.dackar.workflows.WorkflowManager.customPipe
   src.dackar.workflows.WorkflowManager.logger


Classes
-------

.. autoapisummary::

   src.dackar.workflows.WorkflowManager.WorkflowManager


Module Contents
---------------

.. py:data:: NERMapping

.. py:data:: customPipe

.. py:data:: logger

.. py:class:: WorkflowManager(config)

   Workflow Manager



   .. py:attribute:: _nlpConfig
      :value: None



   .. py:attribute:: _neo4jConfig
      :value: None



   .. py:attribute:: _config


   .. py:method:: initializeNLP()

      Initialize NLP calculation




   .. py:method:: initializeNeo4j()

      Initialize NEO4j settings




   .. py:method:: runNLP()

      Execute the knowledge extraction

      :param doc: raw text data to process
      :type doc: str



   .. py:method:: runNeo4j()

      Load data into neo4j




   .. py:method:: run()

      Execute the workflow




   .. py:method:: write(data, fname, style='csv')

      Dump data

      :param data: output data to dump
      :type data: pandas.DataFrame
      :param fname: file name to save the data
      :type fname: str
      :param style: type of file. Defaults to 'csv'.
      :type style: str, optional



   .. py:method:: visualize(doc)

      visual entities

      :param doc: the processed document using nlp pipelines
      :type doc: spacy.tokens.doc.Doc



   .. py:method:: reset()


   .. py:method:: _validate(config)

      validate dackar input file using JSON schema

      :param config: dictionary for dackar input
      :type config: dict

      :raises IOError: error out if not valid



   .. py:method:: generatePattern(config)

      Generate patterns using provided OPM and/or entity file

      :param config: input dictionary
      :type config: dict

      :returns: list of patterns will be used by entity matcher
      :rtype: list



   .. py:method:: processCausalEnt()

      Parse causal keywords, and generate patterns for them
      The patterns can be used to identify the causal relationships

      :returns: list of patterns will be used by causal entity matcher
      :rtype: list



   .. py:method:: preprocessing()

      setup text pre-processing pipeline

      :raises IOError: if pipeline option is not available

      :returns: Preprocessing pipeline
      :rtype: Preprocessing Object



   .. py:method:: ner()

      Set up NER pipelines

      :raises NER Object: Object to conduct NER



   .. py:method:: causal()

      Set up causal analysis flow

      :returns: Object to conduct causal analysis
      :rtype: Workflow Object



