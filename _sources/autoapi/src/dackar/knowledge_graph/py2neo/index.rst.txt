src.dackar.knowledge_graph.py2neo
=================================

.. py:module:: src.dackar.knowledge_graph.py2neo

.. autoapi-nested-parse::

   Created on March, 2025

   @author: wangc, mandd



Classes
-------

.. autoapisummary::

   src.dackar.knowledge_graph.py2neo.Py2Neo


Module Contents
---------------

.. py:class:: Py2Neo(uri, user, pwd)

   .. py:attribute:: __uri


   .. py:attribute:: __user


   .. py:attribute:: __pwd


   .. py:attribute:: __driver
      :value: None



   .. py:method:: close()

      Close the python neo4j connection




   .. py:method:: restart()

      Restart the python neo4j connection




   .. py:method:: create_node(label, properties)

      Create a new graph node

      :param label: node label will be used by neo4j
      :type label: str
      :param properties: node attributes
      :type properties: dict



   .. py:method:: _create_node(tx, label, properties)
      :staticmethod:


      Create a new graph node

      :param tx: python neo4j active session that can be used to execute queries
      :type tx: obj
      :param label: node label will be used by neo4j
      :type label: str
      :param properties: node attributes
      :type properties: dict



   .. py:method:: create_relation(l1, p1, l2, p2, lr, pr=None)

      create graph relation

      :param l1: first node label
      :type l1: str
      :param p1: first node attributes
      :type p1: dict
      :param l2: second node label
      :type l2: str
      :param p2: second node attributes
      :type p2: dict
      :param lr: relationship label
      :type lr: str
      :param pr: attributes for relationship. Defaults to None.
      :type pr: dict, optional



   .. py:method:: _create_relation(tx, l1, p1, l2, p2, lr, pr)
      :staticmethod:


      create graph relation

      :param tx: python neo4j active session that can be used to execute queries
      :type tx: obj
      :param l1: first node label
      :type l1: str
      :param p1: first node attributes
      :type p1: dict
      :param l2: second node label
      :type l2: str
      :param p2: second node attributes
      :type p2: dict
      :param lr: relationship label
      :type lr: str
      :param pr: attributes for relationship. Defaults to None.
      :type pr: dict, optional



   .. py:method:: find_nodes(label, properties=None)

      Find the node in neo4j graph database

      :param label: node label
      :type label: str
      :param properties: node attributes. Defaults to None.
      :type properties: dict, optional

      :returns: list of nodes
      :rtype: list



   .. py:method:: _find_nodes(tx, label, properties)
      :staticmethod:


      Find the node in neo4j graph database

      :param tx: python neo4j active session that can be used to execute queries
      :type tx: obj
      :param label: node label
      :type label: str
      :param properties: node attributes. Defaults to None.
      :type properties: dict, optional

      :returns: list of nodes
      :rtype: list



   .. py:method:: load_csv_for_nodes(file_path, label, attribute)

      Load CSV file to create nodes

      :param file_path: file path for CSV file, location is relative to 'dbms.directories.import' or 'server.directories.import' in neo4j.conf file
      :type file_path: str
      :param label: node label
      :type label: str
      :param attribute: node attribute from the CSV column names
      :type attribute: dict



   .. py:method:: _load_csv_nodes(tx, file_path, label, attribute)
      :staticmethod:



   .. py:method:: load_csv_for_relations(file_path, l1, p1, l2, p2, lr, pr=None)

      Load CSV file to create node relations

      :param file_path: file path for CSV file, location is relative to 'dbms.directories.import' or 'server.directories.import' in neo4j.conf file
      :type file_path: str
      :param l1: first node label
      :type l1: str
      :param p1: first node attribute from the CSV column names
      :type p1: dict
      :param l2: second node label
      :type l2: str
      :param p2: second node attribute from the CSV column names
      :type p2: dict
      :param lr: relationship label
      :type lr: str
      :param pr: of attributes for relation. Defaults to None.
      :type pr: dict, optional



   .. py:method:: _load_csv_for_relations(tx, file_path, l1, p1, l2, p2, lr, pr)
      :staticmethod:



   .. py:method:: query(query, parameters=None, db=None)

      User provided Cypher query statements for python neo4j driver to use to query database

      :param query: user provided Cypher query statements
      :type query: str
      :param parameters: dictionary that provide key/value pairs for query statement to use. Defaults to None.
      :type parameters: dict, optional
      :param db: name for database. Defaults to None.
      :type db: str, optional

      :returns: returned list of queried results.
      :rtype: list



   .. py:method:: reset()

      Reset the database, delete all records, use it with care




   .. py:method:: _reset(tx)
      :staticmethod:



   .. py:method:: get_all()

      Get all records from database

      :returns: list of all records
      :rtype: list



   .. py:method:: _get_all(tx)
      :staticmethod:



