src.dackar.text_processing.Preprocessing
========================================

.. py:module:: src.dackar.text_processing.Preprocessing

.. autoapi-nested-parse::

   Created on October, 2022

   @author: dgarrett622, wangc, mandd



Attributes
----------

.. autoapisummary::

   src.dackar.text_processing.Preprocessing.textacyNormalize
   src.dackar.text_processing.Preprocessing.textacyRemove
   src.dackar.text_processing.Preprocessing.textacyReplace
   src.dackar.text_processing.Preprocessing.numerizer
   src.dackar.text_processing.Preprocessing.preprocessorDefaultList
   src.dackar.text_processing.Preprocessing.preprocessorDefaultOptions


Classes
-------

.. autoapisummary::

   src.dackar.text_processing.Preprocessing.Preprocessing


Module Contents
---------------

.. py:data:: textacyNormalize
   :value: ['bullet_points', 'hyphenated_words', 'quotation_marks', 'repeating_chars', 'unicode', 'whitespace']


.. py:data:: textacyRemove
   :value: ['accents', 'brackets', 'html_tags', 'punctuation']


.. py:data:: textacyReplace
   :value: ['currency_symbols', 'emails', 'emojis', 'hashtags', 'numbers', 'phone_numbers', 'urls', 'user_handles']


.. py:data:: numerizer
   :value: ['numerize']


.. py:data:: preprocessorDefaultList
   :value: ['bullet_points', 'hyphenated_words', 'quotation_marks', 'repeating_chars', 'whitespace',...


.. py:data:: preprocessorDefaultOptions

.. py:class:: Preprocessing(preprocessorList=preprocessorDefaultList, preprocessorOptions=preprocessorDefaultOptions)

   Bases: :py:obj:`object`


   NLP Preprocessing class


   .. py:attribute:: functionList
      :value: []



   .. py:attribute:: preprocessorNames
      :value: ['bullet_points', 'hyphenated_words', 'quotation_marks', 'repeating_chars', 'unicode',...



   .. py:attribute:: pipeline


   .. py:method:: createTextacyNormalizeFunction(name, options)

      Creates a function from textacy.preprocessing.normalize such that only argument is a string
      and adds it to the functionList

      :param name: str, name of the preprocessor
      :param options: dict, dictionary of preprocessor options

      :returns: None



   .. py:method:: createTextacyRemoveFunction(name, options)

      Creates a function from textacy.preprocessing.remove such that the only argument is a string
      and adds it to the functionList

      :param name: str, name of the preprocessor
      :param options: dict, dictionary of preprocessor options

      :returns: None



   .. py:method:: createTextacyReplaceFunction(name, options)

      Creates a function from textacy.preprocessing.replace such that the only argument is a string
      and adds it to the functionList

      :param name: str, name of the preprocessor
      :param options: dict, dictionary of preprocessor options

      :returns: None



   .. py:method:: __call__(text)

      Performs the preprocessing

      :param text: str, string of text to preprocess

      :returns: str, string of processed text
      :rtype: processed



