src.dackar.utils.tagKeywordListReader
=====================================

.. py:module:: src.dackar.utils.tagKeywordListReader


Classes
-------

.. autoapisummary::

   src.dackar.utils.tagKeywordListReader.ERschema
   src.dackar.utils.tagKeywordListReader.entityLibrary


Module Contents
---------------

.. py:class:: ERschema

   Class designed to codify the equipment reliability (ER) schema and classify content of a clause/sentence


   .. py:attribute:: matchDict


   .. py:attribute:: invMatchDict


   .. py:method:: returnERnature(labelList)

      Initialization method
      :param labelList:
      :param list:
      :param list that contains labels identified in a text:

      :returns: nature, list, list that contains the corresponding elements in the ER schema for each label contained in labelList



.. py:class:: entityLibrary(fileName)

   Class designed to contain all nuclear related entities listed in nlp/data/tag_keywords_lists.xlsx


   .. py:attribute:: library


   .. py:method:: checker()

      Method designed to check the structure of the set of nuclear related entities and identify entities
      that might share multiple labels

      :param None:

      :returns: None



   .. py:method:: getLibrary()

      Method designed to return self.library

      :param None:

      :returns: self.library, dict, dictionary containing for each label a list of entities



   .. py:method:: getAcronymsDict()

      Method designed to return self.acronymsDict

      :param None:

      :returns: self.acronymsDict, dict, dictionary containing the acronyms contained in the library



   .. py:method:: expander()

      Method designed to treat those entities that are compounds of two words which are identified as word1-word2.
      These compond words can be written in multiple forms: "word1-word2", "word1word2", "word1 word2".
      Here, these forms are generated for each identified compund word (when '-' is identified in the entity)

      :param None:

      :returns: None



   .. py:method:: searchEntityInfo(entity)

      Method designed to return information about an entity store in the dictionary.

      :param entity:
      :param string:
      :param entity name:

      :returns: (alias,category), tuple, tuple containing the alias and category class of the provided entity



   .. py:method:: keyWordListGenerator(fileName)

      Method designed to read the file and generate a dictionary which contains, for each tag,
      the set of keywords that should be associate to such tag.

      :param fileName:
      :param string:
      :param file containing nuclear related entities:

      :returns: tagsDict, dict, dictionary containing for each label a list of entities



   .. py:method:: cleanTagDict()

      Method designed to clean the dictionary generated by the method keyWordListGenerator(.)
      Here, specific characters or sub strings are removed.
      In addition, if an acronym is defined (within round parentheses), then the acronyms_dict is
      populated {acronym: acronym_definition}

      :param None:

      :returns: None



   .. py:method:: patternCreator()

      This method is designed to create patterns from the tags and the corresponding list of keywords.

      :param None:

      :returns: {"label": label_ID, "pattern": keyword}
      :rtype: patterns, list, list of patterns



