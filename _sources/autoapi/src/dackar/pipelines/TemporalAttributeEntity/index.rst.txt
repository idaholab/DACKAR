src.dackar.pipelines.TemporalAttributeEntity
============================================

.. py:module:: src.dackar.pipelines.TemporalAttributeEntity


Attributes
----------

.. autoapisummary::

   src.dackar.pipelines.TemporalAttributeEntity.logger


Classes
-------

.. autoapisummary::

   src.dackar.pipelines.TemporalAttributeEntity.TemporalAttributeEntity


Functions
---------

.. autoapisummary::

   src.dackar.pipelines.TemporalAttributeEntity.create_temporal_attribute_component


Module Contents
---------------

.. py:data:: logger

.. py:function:: create_temporal_attribute_component(nlp, name, patterns)

.. py:class:: TemporalAttributeEntity(nlp, patterns=None, callback=None)

   Bases: :py:obj:`object`


   Temporal Attribute Entity Recognition class

   How to use it:

   .. code-block:: python

     from TemporalAttributeEntity import TemporalAttributeEntity
     nlp = spacy.load("en_core_web_sm")
     patterns = {'label': 'temporal_attribute', 'pattern': [{'LOWER': 'about'}], 'id': 'temporal_attribute'}
     cmatcher = TemporalAttributeEntity(nlp, patterns)
     doc = nlp("It is close to 5pm.")
     updatedDoc = cmatcher(doc)

   or:

   .. code-block:: python

     nlp.add_pipe('temporal_attribute_entity', config={"patterns": {'label': 'temporal_attribute_entity', 'pattern': [{'LOWER': 'about'}], 'id': 'temporal_attribute_entity'}})
     newDoc = nlp(doc.text)


   .. py:attribute:: name
      :value: 'temporal_attribute_entity'



   .. py:attribute:: entityRuler


   .. py:method:: __call__(doc)

      :param doc: spacy.tokens.doc.Doc, the processed document using nlp pipelines



