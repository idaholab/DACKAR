src.dackar.pipelines.TemporalRelationEntity
===========================================

.. py:module:: src.dackar.pipelines.TemporalRelationEntity


Attributes
----------

.. autoapisummary::

   src.dackar.pipelines.TemporalRelationEntity.logger


Classes
-------

.. autoapisummary::

   src.dackar.pipelines.TemporalRelationEntity.TemporalRelationEntity


Functions
---------

.. autoapisummary::

   src.dackar.pipelines.TemporalRelationEntity.create_temporal_relation_component


Module Contents
---------------

.. py:data:: logger

.. py:function:: create_temporal_relation_component(nlp, name, patterns)

.. py:class:: TemporalRelationEntity(nlp, patterns=None, callback=None)

   Bases: :py:obj:`object`


   Temporal Relation Entity Recognition class

   How to use it:

   .. code-block:: python

     from TemporalRelationEntity import TemporalRelationEntity
     nlp = spacy.load("en_core_web_sm")
     patterns = {'label': 'temporal_relation', 'pattern': [{'LOWER': 'follow'}], 'id': 'temporal_relation'}
     cmatcher = ConjectureEntity(nlp, patterns)
     doc = nlp("The system failed following the pump failure.")
     updatedDoc = cmatcher(doc)

   or:

   .. code-block:: python

     nlp.add_pipe('temporal_relation_entity', config={"patterns": {'label': 'temporal_relation', 'pattern': [{'LOWER': 'follow'}], 'id': 'temporal_relation'}})
     newDoc = nlp(doc.text)


   .. py:attribute:: name
      :value: 'temporal_relation_entity'



   .. py:attribute:: entityRuler


   .. py:method:: __call__(doc)

      :param doc: spacy.tokens.doc.Doc, the processed document using nlp pipelines



